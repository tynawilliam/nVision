export declare type Selector<State, StateSlice> = (state: State) => StateSlice;
export declare type EqualityCheck<StateSlice> = (prevSlice: StateSlice, nextSlice: StateSlice) => boolean;
export declare type StateUpdaterCallback<State> = (prevState: State) => State;
export declare type SetState<State> = (arg: StateUpdaterCallback<State> | State) => void;
export declare type GetState<State> = () => State;
declare type StateTypes = Record<string | number | symbol, unknown> | string | number | boolean | undefined | null;
interface UseStore<State extends StateTypes | Array<StateTypes>> {
    (selector?: Selector<State, State>, equalityCheck?: EqualityCheck<State>): State;
    <StateSlice>(selector?: Selector<State, StateSlice>, equalityCheck?: EqualityCheck<StateSlice>): StateSlice;
    set: SetState<State>;
    get: GetState<State>;
}
export declare function createStore<State extends StateTypes | Array<StateTypes>>(initialState: State | (() => State)): UseStore<State>;
export {};
//# sourceMappingURL=index.d.ts.map